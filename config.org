* Melpa
** Package archives
#+BEGIN_SRC emacs-lisp
  (require 'package)
    (package-initialize)
    (add-to-list 'package-archives
	     '("melpa-stable" . "http://stable.melpa.org/packages/") t)
    (package-refresh-contents)
#+END_SRC

* Terminal
** Set bash ansi terminal to default
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** Set s + return to shortcut
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>" )  'ansi-term)
#+END_SRC
** yes-or-no
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*

* Cursor/typing
** Highlight
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** Subword
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** auto-complete paranthesis
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      ))
  (electric-pair-mode t)
#+END_SRC
* Scroll
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

* Customize UI
** Inhibit startup message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Remove excess
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
* etc
** Line number + column numbers
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC

* Coding stuff
** elpy
#+BEGIN_SRC emacs-lisp
      (defvar myPackages
        '(better-defaults
          elpy
          flycheck
          material-theme
          )
        )


    (unless (package-installed-p 'elpy)
      (package-refresh-contents)
      (package-install 'elpy))
    (use-package elpy
      :ensure t
      :init)
  (elpy-enable)

  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))
#+END_SRC



** org-babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((python . t)
                               (emacs-lisp . t )
                               (scheme . t)
                               ))
#+END_SRC
* Org
** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda ()  (org-bullets-mode))))
#+END_SRC
** Org keybindings
*** org-insert-todo-heading
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-s-RET") 'org-insert-todo-heading )
#+END_SRC
* IDO
** Enable ido mode
#+BEGIN_SRC emacs-lisp

  (setq ido-enable-flex-matching nil )
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** ido vertical
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** switch buffer ido
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* Smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
* Buffers
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
       :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* config edit/ reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload()
	 (interactive)
	 (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :init
    (add-hook 'after-init-hook 'dashboard-refresh-buffer)
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo )
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "I am the bone of my sword"))
#+END_SRC
* Symon
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
   ( "M-รถ" . symon-mode))
#+END_SRC
* Searching with swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind("C-s" . swiper))
#+END_SRC
* Scheme
** quack
#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode 1)
  (setq show-paren-delay 0
        show-paren-style 'parenthesis)
  (show-paren-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (load-file "~/Documents/SICP/geiser/elisp/geiser.el")
  (load "~/Documents/SICP/geiser/build/elisp/geiser-load")
    (require 'geiser-install)

  ;(require 'package)
  ;;; either the stable version:

  ;(add-to-list 'package-archives
    ;; choose either the stable or the latest git version:
  ;   '("melpa-stable" . "http://stable.melpa.org/packages/"))
    ;; '("melpa-unstable" . "http://melpa.org/packages/"))

  ;(package-initialize)


  ;(use-package geiser
  ;    :ensure t
  ;    :config
  ;    (setq geiser-active-implementations '(chicken))
  ;    (setq geiser-chicken-compile-geiser-p nil)
  ;    (require 'geiser)
  ;    (add-hook 'scheme-mode-hook 'geiser-mode)
  ;    (add-to-list 'auto-mode-alist '("\\.scm\\'" . geiser-mode)))
#+END_SRC
* Line wrapping
#+BEGIN_SRC emacs-lisp
  (visual-line-mode t)
#+END_SRC
* Python
Django shell inside Emacs
#+BEGIN_SRC emacs-lisp
  (defun django-shell ()
    (interactive)
    (let ((python-shell-interpreter (read-file-name "Locate manage.py "))
          (python-shell-interpreter-args "shell"))
      (run-python (python-shell-calculate-command) nil t)))
#+END_SRC

** django-mode
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all)
    :init
    (yas-global-mode 1))
#+END_SRC

* Web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
          '(("django" . "\\.html\\ '")))
    (setq web-mode-ac-sources-alist
          '(("css" . (ac-source-css-property))
            ("html" . (ac-source-words-in-buffer ac-source-abbrrev))))
    (setq web-mode-enable-auto-closing t))
#+END_SRC
* Java
** meghanada
#+BEGIN_SRC emacs-lisp
  (require 'meghanada)
  (add-hook 'java-mode-hook
            (lambda ()
              ;; meghanada-mode on
              (meghanada-mode t)
              ;; enable telemetry
              (meghanada-telemetry-enable t)
              (flycheck-mode +1)
              (setq c-basic-offset 2)
              ;; use code format
              (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
  (cond
     ((eq system-type 'windows-nt)
      (setq meghanada-java-path (expand-file-name "bin/java.exe" (getenv "JAVA_HOME")))
      (setq meghanada-maven-path "mvn.cmd"))
     (t
      (setq meghanada-java-path "java")
      (setq meghanada-maven-path "mvn")))
#+END_SRC
** emacs-eclim
#+BEGIN_SRC emacs-lisp
  (setq eclim-executable "/home/per/.p2/pool/plugins/org.eclim_2.8.0/bin/eclim")
  (require 'eclim)
  (add-hook 'java-mode-hook 'eclim-mode)
  (require 'eclimd)
#+END_SRC
* Source code navigation (C++ stuff too)

** ggtags

#+BEGIN_SRC emacs-lisp
      (unless (package-installed-p 'ggtags)
        (package-refresh-contents)
        (package-install 'ggtags))

  (require 'ggtags)
  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                (ggtags-mode 1))))

  (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
  (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
  (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
  (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
  (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
  (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

  (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
#+END_SRC
*** Find definitions in current buffer
#+BEGIN_SRC emacs-lisp
  (setq-local imenu-create-index-function #'ggtags-build-imenu-index)
#+END_SRC

** Code completion (company)
#+BEGIN_SRC emacs-lisp
  (require 'company)
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #' company-select-next)
    (define-key company-active-map (kbd "C-p") #' company-select-previous))
#+END_SRC
*** Irony
#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list ' company-backends 'company-irony))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))
#+END_SRC

