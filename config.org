* Melpa 
** Package archives
#+BEGIN_SRC emacs-lisp
  (package-initialize)

  (require 'package)
  (add-to-list 'package-archives' ("melpa" . "http://melpa.org/packages/"))
  (package-initialize)
#+END_SRC

* Terminal
** Set bash ansi terminal to default
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** Set s + return to shortcut
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>" )  'ansi-term)
#+END_SRC
** yes-or-no 
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*
* Cursor
** Highlight
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
* Scroll 
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

* Customize UI 
** Inhibit startup message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Remove excess
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
* etc
** Prettify symbols
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC
* Python stuff
**elpy
#+BEGIN_SRC emacs-lisp
  (defvar myPackages
    '(better-defaults
      elpy
      material-theme
      )
    )
#+END_SRC
* Org
** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda ()  (org-bullets-mode))))
#+END_SRC
* IDO
** Enable ido mode
#+BEGIN_SRC emacs-lisp

  (setq ido-enable-flex-matching nil )
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** ido vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** switch buffer ido
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* Smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
* Buffers
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer) 
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
       :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* config edit/ reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload()
	 (interactive)
	 (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
